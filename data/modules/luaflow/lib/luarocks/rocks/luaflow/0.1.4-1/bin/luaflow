#!/usr/bin/env lua

local lib = require "luaflow_lib"
local cjson = require "cjson"

local sub = string.sub
local insert = table.insert
local concat = table.concat
local find   = string.find
local encode = cjson.encode
local parse_file = lib.parse_file
local adjust_ctx = lib.adjust_ctx
local create_ctx = lib.create_ctx
local visit_tree = lib.visit_tree
local print_root_flow = lib.print_root_flow
local print_root_dot_flow = lib.print_root_dot_flow
local get_root_dot_flow = lib.get_root_dot_flow
local opt = {}


local function parse_exclude_list(s)
    local l = {}

    for w in string.gmatch(s, "[%w_%.]+") do
        l[w] = true
    end

    return l
end

-- {
--  -- short arg, long arg, description, format
--  -- format:
--  --      ':' -> takes an argument
--  {'f', 'foo', 'this is a option that takes one argument', ':'},
-- }
-- generate getopt and usage function
local function create_getopt(spec, arg, header)
    local usage = {}
    local opt_lookup = {}

    if header then
        insert(usage, header)
    else
        insert(usage, arg[0])
        insert(usage, " [OPTIONS]\n")
    end
    insert(usage, "\nOPTIONS:\n")
    for i, v in ipairs(spec) do
        insert(usage, "  ")
        local short = '-' .. v[1]
        local long = '--' .. v[2]
        insert(usage, short .. ", " .. long
               .. "\t\t" .. v[3] .. "\n")
        local take_arg = false
        if v[4] and find(v[4], ":") then
            take_arg = true
        end
        opt_lookup[short] = { name = v[2], take_arg = take_arg }
        opt_lookup[long] = { name = v[2], take_arg = take_arg }
    end

    local usage_str = concat(usage)

    local usage_function = function () print(usage_str) end
    local getopt_function = function (arg)
        local opt = {}
        local i = 1
        while i <= #arg do
            local v = arg[i]
            if v == '--' then
                i = i + 1
                break
            end

            if sub(v, 1, 1) ~= "-" then
                break
            end

            local spec = opt_lookup[v]
            if not spec then
                return error('Unknow argument "' .. v .. '"\n')
            end

            local name = spec.name

            if spec.take_arg then
                if not arg[i + 1] then
                    return error(v .. ' takes argument')
                end

                opt[name] = arg[i + 1]
                i = i + 1
            else
                opt[name] = true
            end

            i = i + 1
        end

        return opt, i
    end

    return getopt_function, usage_function
end

local function basename(fname)
    local s = string.reverse(fname)
    local i = string.find(s, ".", 1, true)
    if not i then
        return fname
    end

    local j = string.find(s, "/", i, true)
    if j then
        return string.reverse(string.sub(s, i + 1, j - 1))
    else
        return string.reverse(string.sub(s, i + 1))
    end
end

local function gen_graph(ctx, fname, conf)
    local name = basename(fname)
    local s = get_root_dot_flow(ctx, conf)
    local dot_file = "/tmp/" .. name .. ".dot"

    local f = assert(io.open(dot_file, "w"))
    f:write(s)
    f:close()
    --print("Wrote " .. dot_file)

    local output_file = name .. ".png"
    os.execute("dot -Tpng -o " .. output_file .. " " .. dot_file)
    os.remove(dot_file)
    print("Wrote " .. output_file)
end

local function main()

    local getopt, usage = create_getopt({
        {'a', 'ast', 'dump AST'},
        {'d', 'dot', 'generate call graph dot file (GraphViz format)'},
        {'e', 'exclude', 'exclude this list of comma separated functions', ':'},
        {'g', 'graph', 'generate call graph file (png format)'},
        {'m', 'main', 'main/entry function', ':'},
        {'h', 'help', 'show this help message'},
        {'v', 'verbose', 'print more debugging information'},
    }, arg, "luaflow [OPTIONS] luafile\n")

    if #arg < 1 then
        usage()
        os.exit(0)
    end

    local opt, opt_idx = getopt(arg)

    if opt.help then
        usage()
        os.exit(0)
    end

    if opt.verbose then
        print("setting verbose mode")
        lib.set_verbose()
    end

    if not arg[opt_idx] then
        print("Missing luafile")
        usage()
        os.exit()
    elseif opt.exclude then
        opt.exclude = parse_exclude_list(opt.exclude)
    end

    local ctx = create_ctx()
    local fname = arg[opt_idx]
    local t = parse_file(ctx, fname)

    if opt.ast then
        print(encode(t))
        return
    end

    t = visit_tree(ctx, t)

    adjust_ctx(ctx)

    local conf = {
        exclude = opt.exclude,
        main = opt.main,
    }
    if opt.dot then
        print_root_dot_flow(ctx, conf)
    elseif opt.graph then
        gen_graph(ctx, fname, conf)
    else
        print_root_flow(ctx, conf)
    end
    --print(encode(t))
    --print(encode(ctx.call))
    --print(encode(ctx.roots))
end

main()
