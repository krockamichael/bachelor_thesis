--[[
	Project: DisLua.
	Author: imring <fishlake-scripts.ru>.
    License: MIT License.
    
	Project "DisLua" is a parser of bytecode LuaJIT.
	Details: https://github.com/FishLake-Scripts/DisLua
]]
local ARGS_AD = 1
local ARGS_ABC = 2

local opcodes = {
    [0] = { 'ISLT', ARGS_AD },
    { 'ISGE', ARGS_AD },
    { 'ISLE', ARGS_AD },
    { 'ISGT', ARGS_AD },
    { 'ISEQV', ARGS_AD },
    { 'ISNEV', ARGS_AD },
    { 'ISEQS', ARGS_AD },
    { 'ISNES', ARGS_AD },
    { 'ISEQN', ARGS_AD },
    { 'ISNEN', ARGS_AD },
    { 'ISEQP', ARGS_AD },
    { 'ISNEP', ARGS_AD },
    { 'ISTC', ARGS_AD },
    { 'ISFC', ARGS_AD },
    { 'IST', ARGS_AD },
    { 'ISF', ARGS_AD },
    { 'ISTYPE', ARGS_AD },
    { 'ISNUM', ARGS_AD },
    { 'MOV', ARGS_AD },
    { 'NOT', ARGS_AD },
    { 'UNM', ARGS_AD },
    { 'LEN', ARGS_AD },
    { 'ADDVN', ARGS_ABC },
    { 'SUBVN', ARGS_ABC },
    { 'MULVN', ARGS_ABC },
    { 'DIVVN', ARGS_ABC },
    { 'MODVN', ARGS_ABC },
    { 'ADDNV', ARGS_ABC },
    { 'SUBNV', ARGS_ABC },
    { 'MULNV', ARGS_ABC },
    { 'DIVNV', ARGS_ABC },
    { 'MODNV', ARGS_ABC },
    { 'ADDVV', ARGS_ABC },
    { 'SUBVV', ARGS_ABC },
    { 'MULVV', ARGS_ABC },
    { 'DIVVV', ARGS_ABC },
    { 'MODVV', ARGS_ABC },
    { 'POW', ARGS_ABC },
    { 'CAT', ARGS_ABC },
    { 'KSTR', ARGS_AD },
    { 'KCDATA', ARGS_AD },
    { 'KSHORT', ARGS_AD },
    { 'KNUM', ARGS_AD },
    { 'KPRI', ARGS_AD },
    { 'KNIL', ARGS_AD },
    { 'UGET', ARGS_AD },
    { 'USETV', ARGS_AD },
    { 'USETS', ARGS_AD },
    { 'USETN', ARGS_AD },
    { 'USETP', ARGS_AD },
    { 'UCLO', ARGS_AD },
    { 'FNEW', ARGS_AD },
    { 'TNEW', ARGS_AD },
    { 'TDUP', ARGS_AD },
    { 'GGET', ARGS_AD },
    { 'GSET', ARGS_AD },
    { 'TGETV', ARGS_ABC },
    { 'TGETS', ARGS_ABC },
    { 'TGETB', ARGS_ABC },
    { 'TGETR', ARGS_ABC },
    { 'TSETV', ARGS_ABC },
    { 'TSETS', ARGS_ABC },
    { 'TSETB', ARGS_ABC },
    { 'TSETM', ARGS_AD },
    { 'TSETR', ARGS_ABC },
    { 'CALLM', ARGS_ABC },
    { 'CALL', ARGS_ABC },
    { 'CALLMT', ARGS_AD },
    { 'CALLT', ARGS_AD },
    { 'ITERC', ARGS_ABC },
    { 'ITERN', ARGS_ABC },
    { 'VARG', ARGS_ABC },
    { 'ISNEXT', ARGS_AD },
    { 'RETM', ARGS_AD },
    { 'RET', ARGS_AD },
    { 'RET0', ARGS_AD },
    { 'RET1', ARGS_AD },
    { 'FORI', ARGS_AD },
    { 'JFORI', ARGS_AD },
    { 'FORL', ARGS_AD },
    { 'IFORL', ARGS_AD },
    { 'JFORL', ARGS_AD },
    { 'ITERL', ARGS_AD },
    { 'IITERL', ARGS_AD },
    { 'JITERL', ARGS_AD },
    { 'LOOP', ARGS_AD },
    { 'ILOOP', ARGS_AD },
    { 'JLOOP', ARGS_AD },
    { 'JMP', ARGS_AD },
    { 'FUNCF', ARGS_AD },
    { 'IFUNCF', ARGS_AD },
    { 'JFUNCF', ARGS_AD },
    { 'FUNCV', ARGS_AD },
    { 'IFUNCV', ARGS_AD },
    { 'JFUNCV', ARGS_AD },
    { 'FUNCC', ARGS_AD },
    { 'FUNCCW', ARGS_AD }
}

return opcodes