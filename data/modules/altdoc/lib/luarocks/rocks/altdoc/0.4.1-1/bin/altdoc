local command
command = require("runkit").command
local argparse = require("argparse")
local filekit = require("filekit")
local sanitize
sanitize = function(str)
  return str:gsub("[%(%)%.%%%+%-%*%?%[%]%^%$]", "%%%0")
end
local generateMd
generateMd = function(text, prefix)
  if prefix == nil then
    prefix = "-->"
  end
  local gl
  gl = function(l)
    return l:match("^" .. tostring(sanitize(prefix)) .. " ?(.+)")
  end
  return table.concat((function()
    local _accum_0 = { }
    local _len_0 = 1
    for line in text:gmatch("(.-)[\r\n]") do
      if gl(line) then
        _accum_0[_len_0] = gl(line)
        _len_0 = _len_0 + 1
      end
    end
    return _accum_0
  end)(), "\n")
end
local combine
combine = filekit.combine
local linkSource
linkSource = function(text, file, source_dir, prefix, anchor_prefix)
  if source_dir == nil then
    source_dir = "docs/source/"
  end
  if prefix == nil then
    prefix = "-->"
  end
  if anchor_prefix == nil then
    anchor_prefix = "--#"
  end
  local outfile = ((file:gsub("/", ".")) .. ".html")
  local lines
  do
    local _accum_0 = { }
    local _len_0 = 1
    for line in text:gmatch("(.-)[\r\n]") do
      _accum_0[_len_0] = line
      _len_0 = _len_0 + 1
    end
    lines = _accum_0
  end
  for i = 1, #lines do
    lines[i] = lines[i]:gsub("^" .. tostring(sanitize(anchor_prefix)) .. " ?(.+)", tostring(prefix) .. " *[source](" .. tostring("source/" .. outfile .. "#L_" .. tostring(i)) .. ")*<br>")
  end
  return table.concat(lines, "\n")
end
local formatSignatures
formatSignatures = function(text, prefix, signature_prefix)
  if prefix == nil then
    prefix = "-->"
  end
  if signature_prefix == nil then
    signature_prefix = "--:"
  end
  return text:gsub("^" .. tostring(sanitize(signature_prefix)) .. " ?(.+)", tostring(prefix) .. " `%1`<br>")
end
local generateSrc
generateSrc = function(file, source_dir, flags, extra_flags)
  if source_dir == nil then
    source_dir = "/docs/source/"
  end
  if flags == nil then
    flags = "-I -l --anchors -y L"
  end
  if extra_flags == nil then
    extra_flags = ""
  end
  local outfile = combine(source_dir, ((file:gsub("/", ".")) .. ".html"))
  return print((command("highlight -i \"$file\" -o \"$outfile\""))({
    file = file,
    outfile = outfile
  }, flags, extra_flags))
end
local safeOpen
safeOpen = filekit.safeOpen
local generateFile
generateFile = function(file, argt)
  generateSrc(file, argt.source_dir, argt.highlight_flags, argt.highlight_extra)
  local contents
  do
    local _with_0 = safeOpen(file, "r")
    if _with_0.error then
      error(_with_0.error)
    end
    contents = _with_0:read("*a")
    _with_0:close()
  end
  local text = (linkSource(contents, file, argt.source_dir, argt.prefix, argt.anchor_prefix)), argt.prefix
  text = formatSignatures(text, argt.prefix, argt.signature_prefix)
  local md = generateMd(text, argt.prefix)
  local changext = (file:gsub("%.(.+)", ".md")):gsub("/", ".")
  do
    local _with_0 = safeOpen((combine(argt.docs_dir, changext)), "w")
    if _with_0.error then
      error(_with_0.error)
    end
    _with_0:write(md)
    _with_0:close()
    return _with_0
  end
end
local makeDir, isDir, isFile, list
makeDir, isDir, isFile, list = filekit.makeDir, filekit.isDir, filekit.isFile, filekit.list
local buildPathList
buildPathList = function(path, total)
  if total == nil then
    total = { }
  end
  if isDir(path) then
    local _list_0 = list(path)
    for _index_0 = 1, #_list_0 do
      local _continue_0 = false
      repeat
        local node = _list_0[_index_0]
        if (node == ".") or (node == "..") then
          _continue_0 = true
          break
        end
        buildPathList((combine(path, node)), total)
        _continue_0 = true
      until true
      if not _continue_0 then
        break
      end
    end
  else
    table.insert(total, path)
  end
  return total
end
local contains
contains = function(t, e)
  local has = false
  for _index_0 = 1, #t do
    local a = t[_index_0]
    if a == e then
      has = true
    end
  end
  return has
end
local argl
do
  local _with_0 = argparse()
  _with_0:name("altdoc")
  _with_0:description("Language-agnostic documentation generator")
  _with_0:epilog("Homepage - https://github.com/daelvn/altdoc")
  _with_0:help_description_margin(40)
  _with_0:help_vertical_space(1)
  do
    local _with_1 = _with_0:argument("path", "File or folder to extract documentation from")
    _with_1:args(1)
  end
  do
    local _with_1 = _with_0:option("-d --docs-dir", "Destination directory for the documentation")
    _with_1:args(1)
    _with_1:default("docs/")
  end
  do
    local _with_1 = _with_0:option("-s --source-dir", "Destination directory for source files")
    _with_1:args(1)
    _with_1:default("docs/source/")
  end
  do
    local _with_1 = _with_0:option("-p --prefix", "Comment prefix")
    _with_1:args(1)
    _with_1:default("-->")
  end
  do
    local _with_1 = _with_0:option("-a --anchor-prefix", "Comment prefix for linking to source")
    _with_1:args(1)
    _with_1:default("--#")
  end
  do
    local _with_1 = _with_0:option("-S --signature-prefix", "Comment prefix for signatures")
    _with_1:args(1)
    _with_1:default("--:")
  end
  do
    local _with_1 = _with_0:option("-E --exclude", "Exclude a path from being scanned")
    _with_1:args("+")
  end
  do
    local _with_1 = _with_0:option("--highlight-flags", "Flags to pass to highlight")
    _with_1:args(1)
    _with_1:default("-I -l --anchors -y L")
  end
  do
    local _with_1 = _with_0:option("--highlight-extra", "Set extra flags to pass to highlight")
    _with_1:args(1)
    _with_1:default("")
  end
  argl = _with_0:parse()
end
if not (isDir(argl.docs_dir)) then
  makeDir(argl.docs_dir)
end
if not (isDir(argl.source_dir)) then
  makeDir(argl.source_dir)
end
if isFile(argl.path) then
  return generateFile(argl.path, argl)
else
  argl.exclude = argl.exclude or { }
  local _list_0 = buildPathList(argl.path)
  for _index_0 = 1, #_list_0 do
    local node = _list_0[_index_0]
    if not (contains(argl.exclude, node)) then
      generateFile(node, argl)
    end
  end
end
