#!/usr/bin/env lua

local function show_help() print([[
Usage:
   luacov-coveralls [-h] [-v] [-c FILE] [-j FILE] [-e PAT] [-i PAT]
                    [-r DIR] [-t TOKEN] [-o FILE] [--dryrun]

optional arguments:
  -h, --help            show this help message and exit
  -v, --verbose         print verbose messages
  -c FILE, --config FILE
                        configuration file
  -o FILE, --output FILE
                        output file
  -j FILE, --json FILE  merge report with this json report
  -m, --merge           merge statistics for files with same name
  -r DIR, --root DIR    set the root directory
  -e PAT, --exclude PAT set exclude pattern
  -i PAT, --include PAT set include pattern
  -s NAME, --service-name NAME
                        set `service_name` field explicitly
  -b [+-]VALUE, --build-number [+-]VALUE
                        set/change `service_number` field explicitly
  -t TOKEN, --repo-token TOKEN
                        set the repo_token of this project
  --dryrun              run coveralls without uploading report
]]) end

local arg = { ... }

local runner   = require("luacov.runner")
local reporter = require("luacov.reporter.coveralls")
local utils    = require("luacov.coveralls.utils")

local function read_key_(arg, i)
   if arg[i]:sub(1,1) ~= '-' then return nil, nil, i end
   if not arg[i]:sub(2,2) then return "-", nil, i+1 end

   local key, value
   if arg[i]:sub(2,2) ~= '-' then
      key   = arg[i]:sub(2,2)
      value = arg[i]:sub(3)
      if #value == 0 then
         i = i + 1
         value = arg[i]
      elseif value:sub(1,1) == '=' then
         value = value:sub(2)
      end
      return key, value, i + 1
   end

   key = arg[i]:sub(3):match("^([^=]+)=")
   if key then
      value = arg[i]:sub(4 + #key)
      return key, value, i+1
   end

   return arg[i]:sub(3), arg[i+1], i+2
end

local function read_key(arg, i)
   local key, value, n = read_key_(arg, i)
   if n == (i + 1) then return key, value, n end
   assert(n == (i + 2))

   if not value then return key, "true", n - 1 end

   if (#value > 1) and (value:sub(1, 1) == '-') and (not value:match("^%-%d+$")) then
      return key, "true", n - 1
   end

   return key, value, n
end

local function norm_pat(p)
  return((p
    :gsub("/", ".")
    :gsub("\\", ".")
    :gsub("%.lua$", ""))
  )
end

-- parse command line arguments
local args = {
   include = {};
   exclude = {};
   upload_count = 3;
}

local i = 1
while arg[i] do
   local key, value
   key, value, i = read_key(arg, i)
   if key then
      if (key == "h") or (key == "help") then
         show_help()
         os.exit(0)
      elseif (key == "c") or (key == "config") then
         args.config = value
      elseif (key == "j") or (key == "json") then
         args.json = value
      elseif (key == "m") or (key == "merge") then
         args.merge = value
      elseif (key == "o") or (key == "output") then
         args.output = value
      elseif (key == "r") or (key == "root") then
         args.root = value
      elseif (key == "v") or (key == "verbose") then
         args.verbose = value
      elseif (key == "e") or (key == "exclude") then
         args.exclude[#args.exclude + 1] = norm_pat(value)
      elseif (key == "i") or (key == "include") then
         args.include[#args.include + 1] = norm_pat(value)
      elseif (key == "s") or (key == "service-name") then
         args.service = value
      elseif (key == "b") or (key == "build-number") then
         args.build_number = value
      elseif (key == "t") or (key == "repo-token") then
         args.token = value
      elseif (key == "dryrun") then
         args.dryrun = value
      else
         print("Invalid switch: " .. key)
         show_help()
         os.exit(1)
      end
   end
end

if args.build_number and not tonumber(args.build_number) then
   print("Invalid value for build-number option: " .. args.build_number)
   show_help()
   os.exit(1)
end

-- will load configfile specified, or defaults otherwise
local configuration = runner.load_config(args.config)

configuration.include    = configuration.include   or {}
configuration.exclude    = configuration.exclude   or {}
configuration.coveralls  = configuration.coveralls or {}

configuration.reportfile             = args.output       or configuration.reportfile
configuration.coveralls.merge        = args.merge        or configuration.coveralls.merge
configuration.coveralls.json         = args.json         or configuration.coveralls.json
configuration.coveralls.root         = args.root         or '.'
configuration.coveralls.service_name = args.service      or configuration.coveralls.service_name
configuration.coveralls.repo_token   = args.token        or configuration.coveralls.repo_token
configuration.coveralls.debug        = args.verbose      or configuration.coveralls.debug
configuration.coveralls.build_number = args.build_number

for i, patt in ipairs(args.include) do
  table.insert(configuration.include, patt)
end

for i, patt in ipairs(args.exclude) do
  table.insert(configuration.exclude, patt)
end

reporter.report()

if not args.dryrun then
   local function upload()
      local resp, data, status = utils.upload_json_file(configuration.reportfile, "https://coveralls.io/api/v1/jobs")
      if not resp then
         io.stdout:write("Upload error: ", tostring(data), "\n")
         return nil, data, status or -1
      end

      print("Uploaded " .. (resp.message or "") .. " to " .. (resp.url or ""))
      return true, data
   end

   if configuration.coveralls.debug then
      print("Uploading ...")
   end

   local ok, data, status
   for i = 1, args.upload_count do
      ok, data, status = upload()
      if configuration.coveralls.debug then
         print("Raw data:", data)
         print("--------------------")
      end
      if ok then break end
   end

   if configuration.coveralls.debug then
      print("Uploading done")
   end

   if not ok then os.exit(status) end

end
