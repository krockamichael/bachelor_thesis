#!/usr/bin/env lua

-- package.path='./?.lua;' .. package.path -- UNCOMMENT FOR TESTING
local optparse = require("optparse")
local lcmark = require("lcmark")

local function err(msg, exit_code)
  io.stderr:write("lcmark: " .. msg .. "\n")
  os.exit(exit_code or 1)
end

local function ensure_one_of(optval,s,ary)
  for i=1,#ary do
    if ary[i]==s then return true end
  end
  err("Illegal value for " .. optval ..
     "\nLegal values are: " .. table.concat(ary,", "))
end

--- Find a template and return its contents (or `false` if
-- not found). The template is sought first in the
-- working directory, then in `templates`, then in
-- `$HOME/.lunamark/templates`, then in the Windows
-- `APPDATA` directory.
local find_template = function(name, to)
  if not name then
    return false, "Missing template name"
  end
  local base, ext = name:match("([^%.]*)(.*)")
  if (not ext or ext == "") and to then
    ext = "." .. to
  end
  local fname = base .. ext
  local file = io.open(fname, "r")
  if not file then
    file = io.open("templates/" .. fname, "r")
  end
  if not file then
    local home = os.getenv("HOME")
    if home then
      file = io.open(home .. "/.lcmark/templates/" .. fname, "r")
    end
  end
  if not file then
    local appdata = os.getenv("APPDATA")
    if appdata then
      file = io.open(appdata .. "/lcmark/templates/" .. fname, "r")
    end
  end
  if file then
    return file:read("*all")
  else
    return false, "Could not find template '" .. fname .. "'"
  end
end

local spec = [[
lcmark ]] .. lcmark.version .. [[

https://github.com/jgm/lcmark

Usage: lcmark [options] [file..]

Convert markdown to other formats.

Options:

  -t, --to=FORMAT             Target format
  -o, --output=FILE           Output file
  -F, --filter=FILE           Lua script to filter AST
  -T, --template=FILE         Insert output into template
  -c, --columns=NUMBER        Number of columns to wrap text (or 0 for no wrap)
  -S, --smart                 Smart punctuation
  -u, --unsafe                Suppress HTML and potentially unsafe attributes
  -h, --hardbreaks            Treat softbreaks as hard line breaks
  -p, --sourcepos             Include source position information
  -V, --version               Version information
  -h, --help                  This message

FORMAT can be html, latex, man, commonmark, or xml.
]]

local optparser = optparse(spec)

local opts
_G.arg, opts = optparser:parse(_G.arg)

local to = opts.to or "html"
ensure_one_of("--to,-t", to,
  {"commonmark","html","latex","man","xml"})

local output = opts.output
local ok, msg
ok, msg = pcall(function() io.output(output) end)
if not ok then
  err("Could not open '" .. output .. "' for writing.\n" .. msg, 9)
end

local options = {
  smart = opts.smart,
  hardbreaks = opts.hardbreaks,
  safe = not opts.unsafe,
  sourcepos = opts.sourcepos,
  columns = opts.columns or 0,
  yaml_metadata = true,
  filters = {}
}

if opts.filter then
  for filter in string.gmatch(opts.filter, "([^,]+)") do
    local f
    f, msg = lcmark.load_filter(filter)
    if f then
      table.insert(options.filters, f)
    else
      err("Error loading filter " .. filter .. "\n" .. msg)
    end
  end
end

local inp
if #arg == 0 then
  inp = io.read("*all")
else
  local inpt = {}
  for _,f in ipairs(arg) do
    ok, msg = pcall(function() io.input(f) end)
    if ok then
      table.insert(inpt, io.read("*all"))
    else
      err("Could not open file '" .. f .. "': " .. msg, 7)
    end
  end
  inp = table.concat(inpt, "\n")
end

local body, data
body, data, msg = lcmark.convert(inp, to, options)
if body then
  local template = nil
  if opts.template then
    template = find_template(opts.template, to)
    if not template then
      err("Could not find template " .. opts.template .. " for output format " ..
           to)
    end
  end
  if template then
    data.body = body
    local rendered
    rendered, msg = lcmark.render_template(template, data)
    if rendered then
      io.write(rendered)
    else
      err("Could not render template " .. opts.template .. ":\n" .. msg)
    end
  else
    io.write(body)
  end
else
  err(msg)
end

