#!/usr/bin/lua
-- Based on mercury's launcher
-- Copyright 2009 Daniele Alessandri
-- Copyright 2014 Harley Laue

pcall(require, 'luarocks.loader')
local lfs = require 'lfs'
local cli = require 'cliargs'

local print_version = function ()
	local v = require "gimlet.version"
	print("Gimlet Cocktail version " .. v.version)
	os.exit()
end

cli:set_name('gimlet')
cli:add_arg('module', 'path to the Gimlet module')
cli:add_opt('-p, --port=PORT', 'port to listen on', '8080')
cli:add_opt('-wp, --worker_processes=WORKER_PROCESSES', 'Number of nginx worker_processes in production mode', '2')
cli:add_opt('-wc, --worker_connections=WORKER_CONNECTIONS', 'Number of nginx worker_connections', '1024')
cli:add_opt('-s, --public=DIR', 'Server static content from HTTP server from public dir. By default, gimlet classic servers static files, but nginx is much faster.', '')
cli:add_flag('-r, --reload', 'reload the code on every request', false)
cli:add_flag('-x, --xavante', 'Use Lua based Xavante HTTP server', false)
cli:add_flag('-v, --version', 'Version information for Gimlet', false)

local opts, msg = cli:parse(true)
if opts == nil then
	for k, v in pairs(arg) do
		if v == '-v' or v == '--version' then
			print_version()
		end
	end

	io.stderr:write(msg .. "\n")
	os.exit(1)
end

if opts.version then
	print_version()
end

-- Strip .lua if it's there, then ensure it's always there
local app = opts.module:gsub('^(.-)%.lua$', '%1') .. '.lua'
local port = opts.port
local reload = opts.reload
local public = opts.public
local worker_processes = opts.worker_processes
local worker_connections = opts.worker_connections

-- For reload to work, we have to use the full path to the file
-- To do so, we strip the last item off the path and change directories
lfs.chdir(app:gsub('^(.*)/.-$', '%1'))

local cwd = lfs.currentdir()

-- Then can make the full path to app based on the current directory
app = cwd .. '/' .. app:gsub('^.*/(.-)$', '%1')

if opts.xavante then
	local xavante = require 'xavante'
	local wsapi_xavante = require 'wsapi.xavante'
	local xavante_filehandler = require 'xavante.filehandler'
	local rules = {
		{
			match = { "^/(.-)$" },
			-- makeHandler(app) was ovbious simpler, but to allow code
			-- reloading this seems to be what has to be done
			with = wsapi_xavante.makeGenericHandler(cwd, {filename = app, reload = reload})
		}
	}

	if public ~= '' then
		table.insert(rules, 1, {
			match = string.format('^/%s/.*', public),
			with = xavante_filehandler,
			params = cwd
		})

	end

	xavante.HTTP{
		server = {host = '127.0.0.1', port = port},

		defaultHost = {
			rules = rules
		}
	}

	xavante.start()
else
	local cache
	if reload then
		cache = "off"
		worker_processes = 1
	else
		cache = "on"
	end

	local public_dir = ''
	if public ~= '' then
		public_dir = string.format('location /%s { root %s; }', public, cwd)
	end

	-- OpenResty
	cfg_filename = os.tmpname()
	cfg = io.open(cfg_filename, 'w')
	cfg:write(string.format([[worker_processes %d;
error_log stderr notice;
daemon off;

events {
    worker_connections %d;
}

http {
    variables_hash_max_size 1024;
    lua_package_path '?/init.lua;;';
    server {
        listen %s;
        lua_code_cache %s;

        location / {
            default_type text/html;
            set $_url "";
            content_by_lua_file "%s";
        }

		%s
    }
}]], worker_processes, worker_connections, port, cache, app, public_dir))
	cfg:flush()
	lfs.mkdir(cwd .. '/logs')
	os.execute(string.format([[/usr/local/openresty/nginx/sbin/nginx -p "%s" -c "%s"]], cwd, cfg_filename))
	os.remove(cfg_filename)
end

