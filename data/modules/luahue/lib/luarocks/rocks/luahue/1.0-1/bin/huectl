#!/usr/bin/env lua

--- huectl: Command line utility to control Hue lights
--
-- The tool uses the Lua Hue API by the same author.
--
-- Copyright Pete Kazmier 2013

local hue = require 'hue'
local json = require 'json'
local lapp = require 'pl.lapp'
local utils = require 'pl.utils'
local pretty = require 'pl.pretty'
local tablex = require 'pl.tablex'

if not tablex.sort then
  -- I submitted this code to penlight, but until it's accepted, the
  -- penlight dependency won't have it, so we need to define it here.
  function tablex.sort(t,f)
    local keys = {}
    for k in pairs(t) do keys[#keys + 1] = k end
    table.sort(keys,f)
    local i = 0
    return function()
      i = i + 1
      return keys[i], t[keys[i]]
    end
  end
end

local args = lapp [[
Utility to control Philips Hue lights
  -l,--list                             Lights to manipulate
  -d,--discover                         Discover local bridges
  -r,--register                         Register username at bridge
  -u,--username   (default huectladmin) Authenticate using this username
  -g,--get        (optional string)     Get an attribute (state.on, state.bri)

  -O,--on  (optional true|false)        Turn lights on or off
  -A,--alert  (optional select|lselect) Cycle the light brightness
  -E,--effect (optional none|colorloop) Set an effect
  -T,--transitiontime (optional number) Set transition time (x100ms)

  -B,--bri (optional 0..255)     Set brightness (0 low, 255 high)
  -H,--hue (optional 0..65535)   Set hue (0 red, 25500 green, 46920 blue)
  -S,--sat (optional 0..255)     Set saturation (0 white, 255 colored)
  -C,--ct  (optional 153..500)   Set color temp (153 cooler, 500 warmer)

  <bridge>        (optional string)     IP address of a Philips bridge
  <lights...>     (optional string)     List of lights (id or name)
]]

if args.discover then
  for _,ip in ipairs(hue.discover()) do
    print(ip)
  end
  os.exit(0)
end

if not args.bridge then
  lapp.error('missing bridge parameter')
end

if args.register then
  local retval = 0
  local status = hue.register(args.bridge, args.username, 'Huectl CLI Tool')
  for _,result in ipairs(status) do
    if result.error then
      retval = 1
      print(result.error.description)
    end
  end
  if retval == 0 then
    print 'Successfully registered username'
  end
  os.exit(retval)
end

local b = hue.Bridge:new(args.bridge, args.username)
if not b then
  print 'Could not connect to the bridge'
  os.exit(1)
end

if args.list then
  local f = function(x,y) return tonumber(x) < tonumber(y) end
  for k,v in tablex.sort(b:lights(),f) do
    print(k,v)
  end
  os.exit(0)
end

local arg_formatters = {
  on = function(x) return x=='true' and true or false end,
  ct = math.floor,
  bri = math.floor,
  hue = math.floor,
  sat = math.floor,
  alert = function(x) return x end,
  effect = function(x) return x end,
  transitiontime = math.floor,
}

local state = {}
for arg,formatter in pairs(arg_formatters) do
  if args[arg] then
    state[arg] = arg_formatters[arg](args[arg])
  end
end

if next(state) ~= nil then
  local retval = 0
  local errors = b:set_state(args.lights, state)
  if errors then
    retval = 1
    pretty.dump(errors)
  end
  os.exit(retval)
end

pretty.dump(b:get_state(args.lights, args.get))
os.exit(0)
