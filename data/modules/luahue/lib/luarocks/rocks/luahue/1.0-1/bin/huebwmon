#!/usr/bin/env lua

--- Adjust color of your Hue lights based on current network
-- utilization.  Low bandwidth results in green lights, while high
-- bandwidth results in red lights.
--
-- Copyright Pete Kazmier 2013

local hue = require 'hue'
local lapp = require 'pl.lapp'      -- arg parsing
local pretty = require 'pl.pretty'  -- pretty.dump
local socket = require 'socket'     -- socket.gettime, socket.sleep

local args = lapp [[
Change color of Hue lights based on bandwidth usage
  -v,--verbose    Print computed kbps to stdout 
  -i,--interface  (default eth0) Interface to monitor
  -n,--interval   (default 3) Seconds between measurements
  -u,--username   (default huectladmin) Authenticate using this username
  -L,--low        (default 25) Low water mark in kbps (green)
  -H,--high       (default 500) High water mark in kbps (red)
  <bridge>        (string) IP address of a Philips bridge
  <lights...>     (optional string) List of lights (id or name)
]]

local b = hue.Bridge:new(args.bridge, args.username)
if not b then
  print 'Could not connect to the bridge'
  os.exit(1)
end

function kbps_to_hue(kbps)
  if kbps < args.low then
    return 25500  -- green as specified by Hue
  elseif kbps > args.high then
    return 0      -- red as specified by Hue
  else
    return math.floor(((args.high - kbps) * (25500 / (args.high - args.low))) + 0.5)
  end
end

function read_number(filename)
  local f,err = io.open(filename,'r')
  if not f then return error(err) end
  local n = f:read('*n')
  f:close()
  return n
end

function get_octets(interface)
  return 
    read_number('/sys/class/net/'..interface..'/statistics/rx_bytes') +
    read_number('/sys/class/net/'..interface..'/statistics/tx_bytes')
end

function kbps_iterator(interface)
  local old, old_t = get_octets(args.interface), socket.gettime()
  return function()
    local cur, cur_t = get_octets(args.interface), socket.gettime()
    local kbps = ((cur-old)*8/1000) / (cur_t-old_t)
    old, old_t = cur, cur_t
    return kbps
  end
end

local get_kbps = kbps_iterator(args.interface)
local state = { hue=25500, sat=255, on=true }

while true do
  socket.sleep(args.interval)

  local kbps = get_kbps()
  if args.verbose then print(kbps) end

  state.hue = kbps_to_hue(kbps)
  b:set_state(args.lights, state)
end
