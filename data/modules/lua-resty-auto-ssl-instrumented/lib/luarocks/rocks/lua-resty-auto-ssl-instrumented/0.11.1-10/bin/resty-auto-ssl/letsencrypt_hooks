#!/usr/bin/env bash

# When dehydrated is run locally, it will call this hook script when
# various things need to be setup (for example, setting up the challenge token
# or deploying the certs). In turn, this script will call our internal hook
# HTTP API server which can then set the needed data on the current storage
# adapter. This allows for setting the data on non-local storage so challenges
# and certs can work in a multi-server, load balanced environment.

set -e -u

function deploy_challenge {
  local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"

  curl --silent --show-error --fail -XPOST \
    --header "X-Hook-Secret: $HOOK_SECRET" \
    --data-urlencode "domain=$DOMAIN" \
    --data-urlencode "token_filename=$TOKEN_FILENAME" \
    --data-urlencode "token_value=$TOKEN_VALUE" \
    "http://127.0.0.1:$HOOK_SERVER_PORT/deploy-challenge" || { echo "hook request (deploy_challenge) failed" 1>&2; exit 1; }
}

function clean_challenge {
  local DOMAIN="${1}" TOKEN_FILENAME="${2}" TOKEN_VALUE="${3}"

  curl --silent --show-error --fail -XPOST \
    --header "X-Hook-Secret: $HOOK_SECRET" \
    --data-urlencode "domain=$DOMAIN" \
    --data-urlencode "token_filename=$TOKEN_FILENAME" \
    --data-urlencode "token_value=$TOKEN_VALUE" \
    "http://127.0.0.1:$HOOK_SERVER_PORT/clean-challenge" || { echo "hook request (clean_challenge) failed" 1>&2; exit 1; }
}

function deploy_cert {
  local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" FULLCHAINFILE="${4}" CHAINFILE="${5}" TIMESTAMP="${6}"

  curl --silent --show-error --fail -XPOST \
    --header "X-Hook-Secret: $HOOK_SECRET" \
    --data-urlencode "domain=$DOMAIN" \
    --data-urlencode "privkey@$KEYFILE" \
    --data-urlencode "cert@$CERTFILE" \
    --data-urlencode "fullchain@$FULLCHAINFILE" \
    "http://127.0.0.1:$HOOK_SERVER_PORT/deploy-cert" || { echo "hook request (deploy_cert) failed" 1>&2; exit 1; }
}

function unchanged_cert {
  local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" FULLCHAINFILE="${4}" CHAINFILE="${5}"
}

invalid_challenge() {
    local DOMAIN="${1}" RESPONSE="${2}"

    # This hook is called if the challenge response has failed, so domain
    # owners can be aware and act accordingly.
    #
    # Parameters:
    # - DOMAIN
    #   The primary domain name, i.e. the certificate common
    #   name (CN).
    # - RESPONSE
    #   The response that the verification server returned
}

request_failure() {
    local STATUSCODE="${1}" REASON="${2}" REQTYPE="${3}"

    # This hook is called when an HTTP request fails (e.g., when the ACME
    # server is busy, returns an error, etc). It will be called upon any
    # response code that does not start with '2'. Useful to alert admins
    # about problems with requests.
    #
    # Parameters:
    # - STATUSCODE
    #   The HTML status code that originated the error.
    # - REASON
    #   The specified reason for the error.
    # - REQTYPE
    #   The kind of request that was made (GET, POST...)
}

startup_hook() {
  # This hook is called before the cron command to do some initial tasks
  # (e.g. starting a webserver).

  :
}

exit_hook() {
  # This hook is called at the end of the cron command and can be used to
  # do some final (cleanup or other) tasks.

  :
}

HANDLER=$1; shift; $HANDLER "$@"
